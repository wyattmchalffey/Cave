// OptimizedMeshExtraction.compute - Optimized marching cubes with less register usage
#pragma kernel ExtractMesh

// World data texture
Texture3D<float4> WorldData;

// Output buffers
RWStructuredBuffer<float3> Vertices;
RWStructuredBuffer<float3> Normals;
RWStructuredBuffer<int> Indices;
RWStructuredBuffer<int> VertexCount;

// Chunk parameters
float4 ChunkCoord;
float VoxelSize;
int ChunkSize;

// Constants
static const float ISO_LEVEL = 0.0;

// Reduced edge table for common cases only
static const int EdgeTable[256] = {
    0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
    0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
    0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
    0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
    0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,
    0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
    0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
    0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
    0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,
    0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
    0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,
    0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
    0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,
    0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
    0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,
    0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
    0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
    0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
    0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
    0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
    0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
    0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
    0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
    0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,
    0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
    0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
    0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
    0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,
    0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
    0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,
    0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
    0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0
};

// Sample density
float SampleDensity(int3 coord)
{
    int3 texCoord;
    texCoord.x = (int)(ChunkCoord.x * ChunkSize) + coord.x;
    texCoord.y = (int)(ChunkCoord.y * ChunkSize) + coord.y;
    texCoord.z = (int)(ChunkCoord.z * ChunkSize) + coord.z;
    
    return WorldData[texCoord].x;
}

[numthreads(4, 4, 4)] // Reduced thread count for less register pressure
void ExtractMesh(uint3 id : SV_DispatchThreadID)
{
    // Check bounds
    if (id.x >= (uint)(ChunkSize - 1) || id.y >= (uint)(ChunkSize - 1) || id.z >= (uint)(ChunkSize - 1))
        return;
    
    // Convert to int3
    int3 pos;
    pos.x = (int)id.x;
    pos.y = (int)id.y;
    pos.z = (int)id.z;
    
    // Sample only 4 corners (simplified)
    float d0 = SampleDensity(pos);
    float d1 = SampleDensity(pos + int3(1, 0, 0));
    float d2 = SampleDensity(pos + int3(0, 1, 0));
    float d3 = SampleDensity(pos + int3(0, 0, 1));
    
    // Check if surface crosses this voxel
    bool b0 = d0 < ISO_LEVEL;
    bool b1 = d1 < ISO_LEVEL;
    bool b2 = d2 < ISO_LEVEL;
    bool b3 = d3 < ISO_LEVEL;
    
    // Skip if all same
    if (b0 == b1 && b0 == b2 && b0 == b3)
        return;
    
    // Calculate cube index (simplified - only using 4 corners)
    uint cubeIndex = 0;
    if (b0) cubeIndex |= 1;
    if (b1) cubeIndex |= 2;
    if (b2) cubeIndex |= 4;
    if (b3) cubeIndex |= 8;
    
    // Skip if no triangles
    if (cubeIndex == 0 || cubeIndex == 15)
        return;
    
    // Generate a simple quad at the surface
    float3 worldOffset = ChunkCoord.xyz * ChunkSize * VoxelSize;
    float3 voxelPos = float3(pos) * VoxelSize + worldOffset;
    
    // Allocate vertices
    int vertexIndex = 0;
    InterlockedAdd(VertexCount[0], 3, vertexIndex);
    
    if (vertexIndex + 3 > 65535)
        return;
    
    // Create a simple triangle
    float3 v0 = voxelPos;
    float3 v1 = voxelPos + float3(VoxelSize, 0, 0);
    float3 v2 = voxelPos + float3(0, VoxelSize, 0);
    
    // Simple up-facing normal
    float3 normal = float3(0, 1, 0);
    
    // Write vertices
    Vertices[vertexIndex] = v0;
    Vertices[vertexIndex + 1] = v1;
    Vertices[vertexIndex + 2] = v2;
    
    Normals[vertexIndex] = normal;
    Normals[vertexIndex + 1] = normal;
    Normals[vertexIndex + 2] = normal;
    
    Indices[vertexIndex] = vertexIndex;
    Indices[vertexIndex + 1] = vertexIndex + 1;
    Indices[vertexIndex + 2] = vertexIndex + 2;
}
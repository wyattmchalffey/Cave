#pragma kernel GenerateDensityField
#pragma kernel GenerateChamberField
#pragma kernel GenerateTunnelField

// Constants
static const uint CHUNK_SIZE = 32;
static const float VOXEL_SIZE = 0.25;

// Input parameters
float3 ChunkOrigin;
float4 CaveSettings1; // chamberFrequency, chamberMinRadius, chamberMaxRadius, chamberFloorFlatness
float4 CaveSettings2; // tunnelMinRadius, tunnelMaxRadius, stratificationStrength, stratificationFrequency
float4 CaveSettings3; // erosionStrength, rockHardness, minCaveHeight, maxCaveHeight
float4 NoiseSettings; // seed, worleyOctaves, worleyPersistence, time

// Chamber data
StructuredBuffer<float3> ChamberCenters;
int ChamberCount;

// Output
RWStructuredBuffer<float> DensityField;

// Noise functions
float hash(float3 p)
{
    p = frac(p * 0.3183099 + 0.1);
    p *= 17.0;
    return frac(p.x * p.y * p.z * (p.x + p.y + p.z));
}

float noise3D(float3 p)
{
    float3 i = floor(p);
    float3 f = frac(p);
    f = f * f * (3.0 - 2.0 * f);
    
    return lerp(
        lerp(
            lerp(hash(i + float3(0, 0, 0)), hash(i + float3(1, 0, 0)), f.x),
            lerp(hash(i + float3(0, 1, 0)), hash(i + float3(1, 1, 0)), f.x),
            f.y
        ),
        lerp(
            lerp(hash(i + float3(0, 0, 1)), hash(i + float3(1, 0, 1)), f.x),
            lerp(hash(i + float3(0, 1, 1)), hash(i + float3(1, 1, 1)), f.x),
            f.y
        ),
        f.z
    );
}

float worleyNoise3D(float3 p)
{
    float3 cell = floor(p);
    float3 localPos = frac(p);
    
    float minDist = 10.0;
    
    // Check neighboring cells
    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            for (int z = -1; z <= 1; z++)
            {
                float3 neighbor = cell + float3(float(x), float(y), float(z));
                float3 randomPoint = neighbor + frac(float3(hash(neighbor), hash(neighbor + 1.0), hash(neighbor + 2.0)));
                float dist = length(p - randomPoint);
                
                if (dist < minDist)
                {
                    minDist = dist;
                }
            }
        }
    }
    
    return minDist;
}

float evaluateChambers(float3 worldPos)
{
    if (ChamberCount == 0)
        return 1.0; // No chambers, return solid
        
    float minDistance = 1000000.0;
    float3 nearestChamber = float3(0, 0, 0);
    int nearestIndex = 0;
    
    // Find nearest chamber
    for (int i = 0; i < ChamberCount; i++)
    {
        float3 chamberPos = ChamberCenters[i];
        
        // Apply vertical scaling
        float3 scaledDiff = worldPos - chamberPos;
        scaledDiff.y *= 2.0; // Make chambers flatter
        
        float distance = length(scaledDiff);
        if (distance < minDistance)
        {
            minDistance = distance;
            nearestChamber = chamberPos;
            nearestIndex = i;
        }
    }
    
    // Calculate chamber radius (use chamber index for variation)
    float chamberRadius = lerp(CaveSettings1.y, CaveSettings1.z, 
        frac(float(nearestIndex) * 0.31415926));
    
    // Create flat floor effect
    float heightInChamber = worldPos.y - nearestChamber.y;
    float floorDistance = 0.0;
    
    if (heightInChamber < 0)
    {
        float floorY = nearestChamber.y - chamberRadius * 0.3;
        floorDistance = abs(worldPos.y - floorY) * CaveSettings1.w;
    }
    
    // Chamber shape function
    float chamberDensity = (minDistance + floorDistance) / chamberRadius - 1.0;
    
    // Smooth edges
    return smoothstep(-0.1, 0.1, chamberDensity);
}

float evaluateStratification(float3 worldPos)
{
    float layerPattern = sin(worldPos.y * CaveSettings2.w * 3.14159);
    float stratification = layerPattern * CaveSettings2.z;
    
    // Horizontal variation
    float horizontalVar = noise3D(float3(worldPos.x, 0, worldPos.z) * 0.02) * 0.1;
    
    return stratification + horizontalVar;
}

float evaluateErosion(float3 worldPos, float baseDensity)
{
    float erosionNoise = noise3D(worldPos * 0.05) * 2.0 - 1.0;
    
    // Erosion stronger in lower areas
    float heightFactor = 1.0 - saturate((worldPos.y - CaveSettings3.z) / 50.0);
    float erosion = erosionNoise * CaveSettings3.x * heightFactor * (1.0 - CaveSettings3.y);
    
    return baseDensity - erosion;
}

[numthreads(8, 8, 8)]
void GenerateDensityField(uint3 id : SV_DispatchThreadID)
{
    // Check bounds
    if (id.x >= CHUNK_SIZE + 1 || id.y >= CHUNK_SIZE + 1 || id.z >= CHUNK_SIZE + 1)
        return;
    
    // Calculate world position
    float3 localPos = float3(id.x, id.y, id.z) * VOXEL_SIZE;
    float3 worldPos = ChunkOrigin + localPos;
    
    // Start with solid rock
    float density = 1.0;
    
    // Skip if outside cave height range
    if (worldPos.y < CaveSettings3.z || worldPos.y > CaveSettings3.w)
    {
        DensityField[id.x + id.y * (CHUNK_SIZE + 1) + id.z * (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1)] = density;
        return;
    }
    
    // Surface transition
    float surfaceTransitionHeight = CaveSettings3.w - 10.0;
    if (worldPos.y > surfaceTransitionHeight)
    {
        float transition = (worldPos.y - surfaceTransitionHeight) / 10.0;
        density = lerp(density, 0.0, saturate(transition));
    }
    
    // Evaluate cave influences
    float chamberInfluence = evaluateChambers(worldPos);
    float stratification = evaluateStratification(worldPos);
    float detailNoise = noise3D(worldPos * 0.1) * 0.05;
    
    // Combine influences
    float caveDensity = chamberInfluence;
    caveDensity += stratification + detailNoise;
    
    // Apply erosion
    caveDensity = evaluateErosion(worldPos, caveDensity);
    
    // Write to buffer
    DensityField[id.x + id.y * (CHUNK_SIZE + 1) + id.z * (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1)] = caveDensity;
}

[numthreads(8, 8, 8)]
void GenerateChamberField(uint3 id : SV_DispatchThreadID)
{
    // Specialized kernel for chamber-only generation
    if (id.x >= CHUNK_SIZE + 1 || id.y >= CHUNK_SIZE + 1 || id.z >= CHUNK_SIZE + 1)
        return;
    
    float3 localPos = float3(id.x, id.y, id.z) * VOXEL_SIZE;
    float3 worldPos = ChunkOrigin + localPos;
    
    float density = evaluateChambers(worldPos);
    
    DensityField[id.x + id.y * (CHUNK_SIZE + 1) + id.z * (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1)] = density;
}

[numthreads(8, 8, 8)]
void GenerateTunnelField(uint3 id : SV_DispatchThreadID)
{
    // Specialized kernel for tunnel-only generation
    // This would be used in a second pass to carve tunnels
    if (id.x >= CHUNK_SIZE + 1 || id.y >= CHUNK_SIZE + 1 || id.z >= CHUNK_SIZE + 1)
        return;
    
    float3 localPos = float3(id.x, id.y, id.z) * VOXEL_SIZE;
    float3 worldPos = ChunkOrigin + localPos;
    
    // Read existing density
    int index = id.x + id.y * (CHUNK_SIZE + 1) + id.z * (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1);
    float density = DensityField[index];
    
    // Tunnel carving would go here
    // For now, just pass through
    
    DensityField[index] = density;
}

#pragma kernel DebugDensityField

[numthreads(8, 8, 8)]
void DebugDensityField(uint3 id : SV_DispatchThreadID)
{
    // Check bounds
    if (id.x >= CHUNK_SIZE + 1 || id.y >= CHUNK_SIZE + 1 || id.z >= CHUNK_SIZE + 1)
        return;
    
    // Calculate world position
    float3 localPos = float3(id.x, id.y, id.z) * VOXEL_SIZE;
    float3 worldPos = ChunkOrigin + localPos;
    
    // Create a simple test pattern
    float density = 1.0; // Start solid
    
    // Create a sphere of air in the center of each chunk
    float3 chunkCenter = ChunkOrigin + float3(4.0, 4.0, 4.0);
    float distToCenter = length(worldPos - chunkCenter);
    
    if (distToCenter < 3.0)
    {
        density = -1.0; // Air
    }
    else if (distToCenter < 4.0)
    {
        // Smooth transition
        density = (distToCenter - 3.0) / 1.0;
    }
    
    // Also create a horizontal slice of air
    if (worldPos.y > -10.0 && worldPos.y < 10.0)
    {
        density = min(density, (abs(worldPos.y) - 5.0) / 5.0);
    }
    
    // Write to buffer
    DensityField[id.x + id.y * (CHUNK_SIZE + 1) + id.z * (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1)] = density;
}